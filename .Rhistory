GetTime("__AddBaseCampaignReportData...")
# filter shopping performance data to products in job$campaign_mo
dt_mo <- MakeDT(job$campaign_mo)
# Prepare columns to join on and weights for
# the daily and yearly data of the base campaign
# for adference shopping campaigns
if (job$ADFERENCE_CAMPAIGN == TRUE) {
# join key
keyvec <- c("offerId", "targetCountry")
# weight
weightBaseCampaign <- 1 / 2
} else if (job$biddingTarget$type == "GOOGLE_SEARCH") {
# for search campaigns
# join key
keyvec <- c("adGroupName", "keywordText", "keywordMatchType")
# weight
weightBaseCampaign <- job$biddingTarget$baseCampaigns$weight
} else {
stop("\nBase Campaign Feature is currently only implemented for ",
"adference shopping campaigns and google search campaigns. ",
"Campaign type is ", job$biddingTarget$type,". ",
"ADFERENCE_CAMPAIGN flag is set to ", job$ADFERENCE_CAMPAIGN, ".")
}
# if data are segment by device add this info to keyvec
if (job$segmentByDevice == TRUE) {
keyvec <- append(keyvec, "Device")
}
#   __________________________________________________________________________
#   Daily Data                                                            ####
# initialize as bidding campaign data
df_daily <- job$campaign_daily
df_daily$clicks <- as.numeric(df_daily$clicks)
df_daily$impressions <- as.numeric(df_daily$impressions)
if (!is.null(job$baseCampaign_daily)) {
if (nrow(job$baseCampaign_daily) > 0) {
baseCampaign_daily <- MakeDT(job$baseCampaign_daily)
baseCampaign_daily <-
baseCampaign_daily[dt_mo[, ..keyvec], on = keyvec, nomatch = 0]
df_daily <-
CombineReports_daily(biddingCampaign_daily = job$campaign_daily,
baseCampaign_daily = MakeDF(baseCampaign_daily),
weightBaseCampaign = weightBaseCampaign,
adferenceCampaign = job$ADFERENCE_CAMPAIGN,
biddingCampaignType = job$biddingTarget$type)
}
}
#   __________________________________________________________________________
#   Yearly Data                                                           ####
# initialize as bidding campaign data
df_yr <- job$campaign_yr
df_yr$clicks <- as.numeric(df_yr$clicks)
df_yr$impressions <- as.numeric(df_yr$impressions)
# if baseCampaign data available, add them to it
# baseCampaign_yr
if (!is.null(job$baseCampaign_yr)) {
if (nrow(job$baseCampaign_yr) > 0) {
baseCampaign_yr <- MakeDT(job$baseCampaign_yr)
baseCampaign_yr <-
baseCampaign_yr[dt_mo[, ..keyvec], on = keyvec, nomatch = 0]
df_yr <- CombineReports_yr(biddingCampaign_yr = job$campaign_yr,
baseCampaign_yr = MakeDF(baseCampaign_yr),
yrdate = job$baseDay - 364,
weightBaseCampaign = weightBaseCampaign,
adferenceCampaign = job$ADFERENCE_CAMPAIGN,
keyvec = keyvec,
biddingCampaignType = job$biddingTarget$type)
}
}
#   ___________
# workspace 11475121818 otto_desktop_Einrichten_Wohnen_BRAND_BIDDER
dt_daily_base[dt_mo[adGroupName == "Impression {bm} (|sea_wo_marken|) [|brand_78992|bm|]" &
keywordText == "+impression" & keywordMatchType == "Broad",
..keyvec], on = keyvec, nomatch = 0]
dt_daily_base[dt_mo[adGroupName == "Impression {e} (|sea_wo_marken|) [|brand_78992|e|]" &
keywordText == "impression" & keywordMatchType == "Exact",
..keyvec], on = keyvec, nomatch = 0]
dt_yr_base[dt_mo[adGroupName == "Impression {bm} (|sea_wo_marken|) [|brand_78992|bm|]" &
keywordText == "+impression" & keywordMatchType == "Broad",
..keyvec], on = keyvec, nomatch = 0]
dt_yr_base[dt_mo[adGroupName == "Impression {e} (|sea_wo_marken|) [|brand_78992|e|]" &
keywordText == "impression" & keywordMatchType == "Exact",
..keyvec], on = keyvec, nomatch = 0]
dt_mo
dt_yr_base[Device == "HIGH_END_MOBILE"]
dt_yr_base[, unique(Device)]
dt_yr
dt_daily
setwd("~/adference/bmos-r-bidoptimizer/tmp")
library(data.table); library(rpart); library(bit64); library(httr); library(RCurl)
library(jsonlite);  library(fasttime)
library(gsheet)
library(glmnet);
library(stringi);
library(caret)
library(dplyr)
options(datatable.auto.index = FALSE)
options(datatable.fread.na.strings = "")
# source functions
source("../functions/SourceFunctions.r")
SourceFunctions(path="../functions", trace=TRUE)
SourceFunctions(path="../tmp/Testing", trace=TRUE)
options(scipen = 99)
options(width = 200)
source("../LocalHelperFunctions.r")
# set variables
#workspace = "SHOPPING24_NEU_Produktgruppe_B/2019-11-27__13-05-47__SHOPPING24_NEU_Produktgruppe_B__Badeanzuege-produktgruppe_91842-__289489836.RData"
#workspace = "2020-03-03__03-56-02__Karneval_Universe_DE__Generisch_Karneval__769995796.RData"
# workspace = "2020-10-30__03-30-48__otto_desktop_Einrichten_Wohnen_BRAND_BIDDER__Impression-sea_wo_marken-brand_78992-__11475121818.RData"
# load( sprintf("workspaces/%s", workspace) )
LoadRemoteWorkspace(campaignId = 11479031884, local_folder ="workspaces/")
# # specify different campaign parameters
# #######################################
# create Cache Environment
Cache <- new.env(TRUE, emptyenv())
# read secrejt key from local dev directory
CacheSet(key = "SECRET_KEY", value = "SECRET_KEY")
GetTime("init", accountId = job$accountId, campaignId = job$campaignGoogleId)
# ############################
# prod script chain
#options(datatable.verbose=F)
#options(datatable.auto.index=T)
job$CHECKUP_LOG_PATH <- "../tmp/reports/"
job$BMOS_LOG_NAME  <- "bmos_log.csv"
job$BMOS_LOG_PATH  <- "../tmp/reports/"
job$REPORTS_PATH   <- "../tmp/reports/"
job$REPORTS_DIR    <- format(Sys.time(), "%Y%m%d/")
job$productionMode <- F #mobile Modifier not set
options(warn=2)
setDTthreads(1)
job_load <- job
dt_daily <- MakeDT(job_load$campaign_daily)
dt_yr <- MakeDT(job_load$campaign_yr)
dt_mo <- MakeDT(job_load$campaign_mo)
dt_daily_base <- MakeDT(job_load$baseCampaign_daily)
dt_yr_base <- MakeDT(job_load$baseCampaign_yr)
dt_mo
# workspace 11479031884 otto_desktop_Einrichten_Wohnen_PRODUKTGRUPPE_BIDDER
dt_daily_base[dt_mo[adGroupName == "Heizkissen {bm} (|sea_wo_heimtextilien|) [|Produktgruppe_95973|bm|]" &
keywordText == "+heizkissen" & keywordMatchType == "Broad",
..keyvec], on = keyvec, nomatch = 0]
if (is.null(job)) return(NULL)
# print status
GetTime("__AddBaseCampaignReportData...")
# filter shopping performance data to products in job$campaign_mo
dt_mo <- MakeDT(job$campaign_mo)
# Prepare columns to join on and weights for
# the daily and yearly data of the base campaign
# for adference shopping campaigns
if (job$ADFERENCE_CAMPAIGN == TRUE) {
# join key
keyvec <- c("offerId", "targetCountry")
# weight
weightBaseCampaign <- 1 / 2
} else if (job$biddingTarget$type == "GOOGLE_SEARCH") {
# for search campaigns
# join key
keyvec <- c("adGroupName", "keywordText", "keywordMatchType")
# weight
weightBaseCampaign <- job$biddingTarget$baseCampaigns$weight
} else {
stop("\nBase Campaign Feature is currently only implemented for ",
"adference shopping campaigns and google search campaigns. ",
"Campaign type is ", job$biddingTarget$type,". ",
"ADFERENCE_CAMPAIGN flag is set to ", job$ADFERENCE_CAMPAIGN, ".")
}
# if data are segment by device add this info to keyvec
if (job$segmentByDevice == TRUE) {
keyvec <- append(keyvec, "Device")
}
#   __________________________________________________________________________
#   Daily Data                                                            ####
# initialize as bidding campaign data
df_daily <- job$campaign_daily
df_daily$clicks <- as.numeric(df_daily$clicks)
df_daily$impressions <- as.numeric(df_daily$impressions)
if (!is.null(job$baseCampaign_daily)) {
if (nrow(job$baseCampaign_daily) > 0) {
baseCampaign_daily <- MakeDT(job$baseCampaign_daily)
baseCampaign_daily <-
baseCampaign_daily[dt_mo[, ..keyvec], on = keyvec, nomatch = 0]
df_daily <-
CombineReports_daily(biddingCampaign_daily = job$campaign_daily,
baseCampaign_daily = MakeDF(baseCampaign_daily),
weightBaseCampaign = weightBaseCampaign,
adferenceCampaign = job$ADFERENCE_CAMPAIGN,
biddingCampaignType = job$biddingTarget$type)
}
}
#   __________________________________________________________________________
#   Yearly Data                                                           ####
# initialize as bidding campaign data
df_yr <- job$campaign_yr
df_yr$clicks <- as.numeric(df_yr$clicks)
df_yr$impressions <- as.numeric(df_yr$impressions)
# if baseCampaign data available, add them to it
# baseCampaign_yr
if (!is.null(job$baseCampaign_yr)) {
if (nrow(job$baseCampaign_yr) > 0) {
baseCampaign_yr <- MakeDT(job$baseCampaign_yr)
baseCampaign_yr <-
baseCampaign_yr[dt_mo[, ..keyvec], on = keyvec, nomatch = 0]
df_yr <- CombineReports_yr(biddingCampaign_yr = job$campaign_yr,
baseCampaign_yr = MakeDF(baseCampaign_yr),
yrdate = job$baseDay - 364,
weightBaseCampaign = weightBaseCampaign,
adferenceCampaign = job$ADFERENCE_CAMPAIGN,
keyvec = keyvec,
biddingCampaignType = job$biddingTarget$type)
}
}
#   __________________________________________________________________________
#   Monthly aggregated Data                                               ####
dfs <- AggregateReports(df_daily = df_daily,
df_mo = job$campaign_mo,
df_yr = df_yr,
adferenceCampaign = job$ADFERENCE_CAMPAIGN,
keyvec = keyvec,
biddingCampaignType = job$biddingTarget$type)
job$campaign_daily <- dfs$df_daily
# workspace 11479031884 otto_desktop_Einrichten_Wohnen_PRODUKTGRUPPE_BIDDER
dt_daily_base[dt_mo[adGroupName == "Heizkissen {bm} (|sea_wo_heimtextilien|) [|Produktgruppe_95973|bm|]" &
keywordText == "+heizkissen" & keywordMatchType == "Broad",
..keyvec], on = keyvec, nomatch = 0]
dt_mo
dt_daily_base[dt_mo[adGroupName == "Heizkissen {e} (|sea_wo_heimtextilien|) [|Produktgruppe_95973|e|]" &
keywordText == "heizkissen" & keywordMatchType == "Exact",
..keyvec], on = keyvec, nomatch = 0]
dt_yr_base[dt_mo[adGroupName == "Heizkissen {bm} (|sea_wo_heimtextilien|) [|Produktgruppe_95973|bm|]" &
keywordText == "+heizkissen" & keywordMatchType == "Broad",
..keyvec], on = keyvec, nomatch = 0]
dt_yr_base[dt_mo[adGroupName == "Heizkissen {e} (|sea_wo_heimtextilien|) [|Produktgruppe_95973|e|]" &
keywordText == "heizkissen" & keywordMatchType == "Exact",
..keyvec], on = keyvec, nomatch = 0]
setwd("~/adference/bmos-r-bidoptimizer/tmp")
library(data.table); library(rpart); library(bit64); library(httr); library(RCurl)
library(jsonlite);  library(fasttime)
library(gsheet)
library(glmnet);
library(stringi);
library(caret)
library(dplyr)
options(datatable.auto.index = FALSE)
options(datatable.fread.na.strings = "")
# source functions
source("../functions/SourceFunctions.r")
SourceFunctions(path="../functions", trace=TRUE)
SourceFunctions(path="../tmp/Testing", trace=TRUE)
options(scipen = 99)
options(width = 200)
source("../LocalHelperFunctions.r")
# set variables
#workspace = "SHOPPING24_NEU_Produktgruppe_B/2019-11-27__13-05-47__SHOPPING24_NEU_Produktgruppe_B__Badeanzuege-produktgruppe_91842-__289489836.RData"
#workspace = "2020-03-03__03-56-02__Karneval_Universe_DE__Generisch_Karneval__769995796.RData"
# workspace = "2020-10-30__03-30-48__otto_desktop_Einrichten_Wohnen_BRAND_BIDDER__Impression-sea_wo_marken-brand_78992-__11475121818.RData"
# load( sprintf("workspaces/%s", workspace) )
LoadRemoteWorkspace(campaignId = 11479036231, local_folder ="workspaces/")
# # specify different campaign parameters
# #######################################
# create Cache Environment
Cache <- new.env(TRUE, emptyenv())
# read secrejt key from local dev directory
CacheSet(key = "SECRET_KEY", value = "SECRET_KEY")
GetTime("init", accountId = job$accountId, campaignId = job$campaignGoogleId)
# ############################
# prod script chain
#options(datatable.verbose=F)
#options(datatable.auto.index=T)
job$CHECKUP_LOG_PATH <- "../tmp/reports/"
job$BMOS_LOG_NAME  <- "bmos_log.csv"
job$BMOS_LOG_PATH  <- "../tmp/reports/"
job$REPORTS_PATH   <- "../tmp/reports/"
job$REPORTS_DIR    <- format(Sys.time(), "%Y%m%d/")
job$productionMode <- F #mobile Modifier not set
options(warn=2)
setDTthreads(1)
dt_mo
job_load <- job
dt_daily <- MakeDT(job_load$campaign_daily)
dt_yr <- MakeDT(job_load$campaign_yr)
dt_mo <- MakeDT(job_load$campaign_mo)
dt_daily_base <- MakeDT(job_load$baseCampaign_daily)
dt_yr_base <- MakeDT(job_load$baseCampaign_yr)
if (is.null(job)) return(NULL)
# print status
GetTime("__AddBaseCampaignReportData...")
# filter shopping performance data to products in job$campaign_mo
dt_mo <- MakeDT(job$campaign_mo)
# Prepare columns to join on and weights for
# the daily and yearly data of the base campaign
# for adference shopping campaigns
if (job$ADFERENCE_CAMPAIGN == TRUE) {
# join key
keyvec <- c("offerId", "targetCountry")
# weight
weightBaseCampaign <- 1 / 2
} else if (job$biddingTarget$type == "GOOGLE_SEARCH") {
# for search campaigns
# join key
keyvec <- c("adGroupName", "keywordText", "keywordMatchType")
# weight
weightBaseCampaign <- job$biddingTarget$baseCampaigns$weight
} else {
stop("\nBase Campaign Feature is currently only implemented for ",
"adference shopping campaigns and google search campaigns. ",
"Campaign type is ", job$biddingTarget$type,". ",
"ADFERENCE_CAMPAIGN flag is set to ", job$ADFERENCE_CAMPAIGN, ".")
}
# if data are segment by device add this info to keyvec
if (job$segmentByDevice == TRUE) {
keyvec <- append(keyvec, "Device")
}
#   __________________________________________________________________________
#   Daily Data                                                            ####
# initialize as bidding campaign data
df_daily <- job$campaign_daily
df_daily$clicks <- as.numeric(df_daily$clicks)
df_daily$impressions <- as.numeric(df_daily$impressions)
if (!is.null(job$baseCampaign_daily)) {
if (nrow(job$baseCampaign_daily) > 0) {
baseCampaign_daily <- MakeDT(job$baseCampaign_daily)
baseCampaign_daily <-
baseCampaign_daily[dt_mo[, ..keyvec], on = keyvec, nomatch = 0]
df_daily <-
CombineReports_daily(biddingCampaign_daily = job$campaign_daily,
baseCampaign_daily = MakeDF(baseCampaign_daily),
weightBaseCampaign = weightBaseCampaign,
adferenceCampaign = job$ADFERENCE_CAMPAIGN,
biddingCampaignType = job$biddingTarget$type)
}
}
#   __________________________________________________________________________
#   Yearly Data                                                           ####
# initialize as bidding campaign data
df_yr <- job$campaign_yr
df_yr$clicks <- as.numeric(df_yr$clicks)
df_yr$impressions <- as.numeric(df_yr$impressions)
# if baseCampaign data available, add them to it
# baseCampaign_yr
if (!is.null(job$baseCampaign_yr)) {
if (nrow(job$baseCampaign_yr) > 0) {
baseCampaign_yr <- MakeDT(job$baseCampaign_yr)
baseCampaign_yr <-
baseCampaign_yr[dt_mo[, ..keyvec], on = keyvec, nomatch = 0]
df_yr <- CombineReports_yr(biddingCampaign_yr = job$campaign_yr,
baseCampaign_yr = MakeDF(baseCampaign_yr),
yrdate = job$baseDay - 364,
weightBaseCampaign = weightBaseCampaign,
adferenceCampaign = job$ADFERENCE_CAMPAIGN,
keyvec = keyvec,
biddingCampaignType = job$biddingTarget$type)
}
}
dt_mo
unique(dt_mo[, ..keyvec])
unique(dt_mo[, ..keyvec[keyvec != "Device"]])
unique(dt_mo[, .(adGroupName, keywordText, keywordMatchType)])
dt_daily_base[unique(dt_mo[, .(adGroupName, keywordText, keywordMatchType)])]
dt_daily_base[unique(dt_mo[, .(adGroupName, keywordText, keywordMatchType)]), on = keyvec]
dt_daily_base[unique(dt_mo[, .(adGroupName, keywordText, keywordMatchType)]), on = keyvec[keyvec != "Device"]]
coef(job$modelFit$modelFit, job$modelFit$lambdaFit)
?dummyVars
two_levels <- factor(rep(letters[1:2], each = 5))
two_levels
class2ind(two_levels)
class2ind(two_levels, drop2nd = TRUE)
lib.Paths()
.libPaths()
two_levels
?dummyVars
?class2ind
iris
dummy <- dummyVars("~.", iris)
dummy
summary(dummy)
sparseMatrix(dummy)
setwd("/Users/sara/Desktop/Projects/Global_Preferences_Survey/")
# Source helper functions
source("functions/SourceFunctions.r")
SourceFunctions(path = "functions/helper_functions/", trace = TRUE)
# Load libraries
LoadRequiredLibraries()
# Select the directory
path_GPS_dir <- "files/GPS_Dataset/GPS_dataset_individual_level/"
path_Index_dir <- "files/Data_Extract_From_World_Development_Indicators/"
# Load the data
data <- read_dta(paste0(path_GPS_dir, "individual_new.dta"))
indicators <- read_csv(file = paste0(path_Index_dir, "Data.csv"), na = "..")
# ========================= #
#### 1. PREPARE THE DATA ####
# ========================= #
# Select specific columns of indicators
indicators <- indicators %>% select(c(names(indicators)[1],
names(indicators)[5:14]))
# New names for the columns indicating the GDP
newColsNames <- sapply(strsplit(split = "\\ \\[YR", x = names(indicators)[-1]),
`[`, 1)
setnames(indicators, old = names(indicators)[-1], new = newColsNames)
# Set the data to data table
setDT(data)
setDT(indicators)
# Clean the names of the countries
indicators <- CleanCountryNamesGDP(data, indicators)
# Calculate the average GDP p/c
avgGDP <- rowMeans(indicators[, -1])
indicators[, avgGDPpc := avgGDP]
# Merge information of the indicators into the dataset
data <- data %>% merge(indicators, by.x = "country", by.y = "Country Name") %>%
select(country, isocode, region, language, patience, risktaking, posrecip,
negrecip, altruism, trust, subj_math_skills, gender, age, avgGDPpc)
# Create a complete dataset (no NAs)
dataComplete <- data[complete.cases(data)]
# ========================= #
#### 2. CREATE THE MODEL ####
# ========================= #
dataComplete[, age_2 := age^2]
# Set the path
setwd("/Users/sara/Desktop/Projects/Global_Preferences_Survey/")
# Source helper functions
source("functions/SourceFunctions.r")
SourceFunctions(path = "functions/helper_functions/", trace = TRUE)
# Load libraries
LoadRequiredLibraries()
install.packages(tidyverse)
install.packages("tidyverse")
install.packages("dplry")
install.packages("dplyr")
install.packages("dplyr")
# Select the directory
path_GPS_dir <- "files/GPS_Dataset/GPS_dataset_individual_level/"
path_Index_dir <- "files/Data_Extract_From_World_Development_Indicators/"
# Load the data
data <- read_dta(paste0(path_GPS_dir, "individual_new.dta"))
library(tibble);
library(caret);
install.packages("Rcpp")
install.packages("Rcpp")
library(caret);
install.packages("caret")
install.packages("caret")
library(caret);
library(scales);
library(plyr);
library(dplyr);
library(magrittr);
library(readr);
library(stringr);
library(moments);
library(FitAR);
library(HDInterval);
library(BEST)
# Load the data
data <- read_dta(paste0(path_GPS_dir, "individual_new.dta"))
library(haven);
# Load the data
data <- read_dta(paste0(path_GPS_dir, "individual_new.dta"))
indicators <- read_csv(file = paste0(path_Index_dir, "Data.csv"), na = "..")
# Select specific columns of indicators
indicators <- indicators %>% select(c(names(indicators)[1],
names(indicators)[5:14]))
library(dplyr);
install.packages("dplyr")
install.packages("dplyr")
library(dplyr);
install.packages("dplyr")
install.packages("dplyr")
library(dplyr);
# Select specific columns of indicators
indicators <- indicators %>% select(c(names(indicators)[1],
names(indicators)[5:14]))
library(plyr);
library(dplyr);
install.packages("rlang")
install.packages("rlang")
library(dplyr);
# Set the path
setwd("/Users/sara/Desktop/Projects/Global_Preferences_Survey/")
# Source helper functions
source("functions/SourceFunctions.r")
SourceFunctions(path = "functions/helper_functions/", trace = TRUE)
# Load libraries
LoadRequiredLibraries()
library(tidyverse);
install.packages("tidyverse")
library(tidyverse);
# Load libraries
LoadRequiredLibraries()
# Libraries
library(data.table);
library(rpart);
library(bit64);
library(httr);
library(fasttime);
library(stringi);
library(tidyverse);
library(tibble);
library(caret);
library(scales);
library(plyr);
library(dplyr);
library(magrittr);
library(readr);
library(stringr);
library(moments);
library(haven);
library(FitAR);
library(HDInterval);
library(BEST)
install.packages("rlang")
install.packages("rlang")
library(rlang)
options(warn=0)
library(rlang)
